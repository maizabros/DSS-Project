function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("camera", "acquire_camera_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.527, 0.805, 0.918, 0) } )

	self.models = {"#dam", "#gates", "#penstocks", "/power_houses#power_house_1", "/power_houses#power_house_2", "#turbine_1", "#turbine_2", "#turbine_3", "#turbine_4"}

	for k, v in pairs(self.models) do
		pos = go.get_position(v)
		model.set_constant(v, "light", vmath.vector4(pos.x, pos.y + 10, pos.z + 20, 0))
	end
	self.show_turbs = false
	self.zoom = 1
	
end

function on_input(self, action_id, action)
	
	if action_id == hash("zoom_in") and action.value == 1 then
		self.zoom = self.zoom + 0.05
		for k, v in pairs(self.models) do
			pos = go.get_position(v)
			go.set_scale(self.zoom,v)
			model.set_constant(v, "light", vmath.vector4(pos.x * self.zoom, (pos.y + 10) * self.zoom, (pos.z + 20) * self.zoom, 0))
		end
	elseif action_id == hash("zoom_out") and action.value == 1 then
		self.zoom = self.zoom - 0.05
		for k, v in pairs(self.models) do
			pos = go.get_position(v)
			go.set_scale(self.zoom,v)
			model.set_constant(v, "light", vmath.vector4(pos.x * self.zoom, (pos.y + 10) * self.zoom, (pos.z + 20) * self.zoom, 0))
		end
	elseif action_id == hash("show_turbines") and action.pressed then
		if self.show_turbs then
			go.set_position(vmath.vector3(0, 0, 0), "power_houses")
		else
			go.set_position(vmath.vector3(0, 12, 0),"power_houses")
		end
		self.show_turbs = not self.show_turbs
	end
end